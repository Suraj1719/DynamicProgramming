//brute force
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        //brute force 
        //t.c :O(2^(n*n))(worst case) gives TLE
        //s.c :O(n) - stack path
        return find(0,0,triangle);
    }
    int find(int i,int j,List<List<Integer>> t){
        //base case if we reach last row we are finish
        if(i==t.size()-1)
        return t.get(i).get(j);

        int down=Integer.MAX_VALUE;
        int dg=Integer.MAX_VALUE;
        down=t.get(i).get(j)+find(i+1,j,t);
        dg=t.get(i).get(j)+find(i+1,j+1,t);

        return Math.min(down,dg);
    }
}

approach-2
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        //optimization using memoization  
        //t.c :O((n*n))
        //s.c :O(n) - stack path+O((n*n))
        int n=triangle.size();
        int dp[][]=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
        return find(0,0,triangle,dp);
    }
    int find(int i,int j,List<List<Integer>> t,int dp[][]){
        //base case if we reach last row we are finish
        if(i==t.size()-1)
        return t.get(i).get(j);
        if(dp[i][j]!=-1)
        return dp[i][j];

        int down=Integer.MAX_VALUE;
        int dg=Integer.MAX_VALUE;
        down=t.get(i).get(j)+find(i+1,j,t,dp);
        dg=t.get(i).get(j)+find(i+1,j+1,t,dp);

        return dp[i][j]=Math.min(down,dg);
    }
}
//approach-3(tabulation)
class Solution {
    public int minimumTotal(List<List<Integer>> t) {
        //tabulation approach for remove extra stack space
        int n=t.size();
        int dp[][]=new int[n][n];
        //base case last row
        for(int i=0;i<n;i++){
            dp[n-1][i]=t.get(n-1).get(i);
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down=Integer.MAX_VALUE;
                int dg=Integer.MAX_VALUE;
                down=t.get(i).get(j)+dp[i+1][j];
                dg=t.get(i).get(j)+dp[i+1][j+1];

                dp[i][j]=Math.min(down,dg);
            }
        }
        return dp[0][0];
    }
}
//optimization of tabulation

class Solution {
    public int minimumTotal(List<List<Integer>> t) {
        //space optiimization tabulation approach 
        int n=t.size();
        int next[]=new int[n];
        //base case last row
        for(int i=0;i<n;i++){
            next[i]=t.get(n-1).get(i);
        }

        for(int i=n-2;i>=0;i--){
            int cur[]=new int[n];
            for(int j=i;j>=0;j--){
                int down=Integer.MAX_VALUE;
                int dg=Integer.MAX_VALUE;
                down=t.get(i).get(j)+next[j];
                dg=t.get(i).get(j)+next[j+1];

                cur[j]=Math.min(down,dg);
            }
            next=cur;
        }
        return next[0];
    }
}
