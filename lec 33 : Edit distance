
// LC 72. Edit Distance


//code

package dpseries;
import java.util.*;
public class lec33EditDistance {

	public static void main(String[] args) {
		// 72. Edit Distance
		String word1 = "intention", word2 = "execution";
		System.out.println(minDistanceRec(word1,word2));
		System.out.println(minDistanceMemo(word1,word2));
		System.out.println(minDistanceTabulation(word1,word2));
		System.out.println(minDistanceTABOPT(word1,word2));

	}
	
	public static int minDistanceTABOPT(String word1, String word2) {
        //space optimization tabulation 
        //time com. :O(n*m)
        //space com. :O(2*m)
        int n=word1.length();
        int m=word2.length();
        int prev[]=new int[m+1];
        //base case
        for(int i=0;i<=m;i++)
        prev[i]=i;

        for(int i=1;i<=n;i++){
            int cur[]=new int[m+1];
            cur[0]=i;
            for(int j=1;j<=m;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1))
                cur[j]=prev[j-1];
                else{
    cur[j]=1+Math.min(prev[j-1],Math.min(prev[j],cur[j-1]));
                }
            }
            prev=cur;
        }
    return prev[m];   
    }
	
	public static int minDistanceTabulation(String word1, String word2) {
        //tabulation  1 based for removal of extra stack space purpose
        //time com. :O(n*m)
        //space com. :O(n*m)
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n+1][m+1];
        //base case
        for(int i=0;i<=n;i++)
        dp[i][0]=i;

        for(int j=0;j<=m;j++)
        dp[0][j]=j;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1))
                dp[i][j]=dp[i-1][j-1];
                else{
    dp[i][j]=1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
    return dp[n][m];   
    }
	
	public static int minDistanceRec(String word1, String word2) {
        //brute force recursion  gives tle
        //time com. :O(3^n)*O(3^m)
        //space com. :O(n+m) statck space
        int n=word1.length();
        int m=word2.length();
    return f(n-1,m-1,word1,word2);
    }
	
    static int f(int i,int j,String s,String t){
    if(i<0) return j+1;//if first string is empty so we can insert j+1 character to get second

    if(j<0) return i+1;//similarly
    if(s.charAt(i)==t.charAt(j))
    return 0+f(i-1,j-1,s,t);

    return 1+Math.min(f(i,j-1,s,t),Math.min(f(i-1,j,s,t),f(i-1,j-1,s,t)));
    }
    
    public static int minDistanceMemo(String word1, String word2) {
        //memoization
        //time com. :O(n*m)
        //space com. :O(n*m)+O(n+m) statck space
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n][m];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
    return f(n-1,m-1,word1,word2,dp);
    }
    static int f(int i,int j,String s,String t,int dp[][]){
    if(i<0) return j+1;//if first string is empty so we can insert j+1 character to get second

    if(j<0) return i+1;//similarly
    if(dp[i][j]!=-1)
    return dp[i][j];
    if(s.charAt(i)==t.charAt(j))
    return dp[i][j]=0+f(i-1,j-1,s,t,dp);

    return dp[i][j]=1+Math.min(f(i,j-1,s,t,dp),
                      Math.min(f(i-1,j,s,t,dp),f(i-1,j-1,s,t,dp)));
    }

}
