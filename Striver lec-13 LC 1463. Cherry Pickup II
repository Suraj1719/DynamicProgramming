
//RECURSION GIVES TLE
class Solution {
    public int cherryPickup(int[][] grid) {
        int r=grid.length;
        int c=grid[0].length;
        return find(0,0,c-1,r,c,grid);
        
    }
    int find(int i,int j1,int j2,int r,int c,int [][]g){
        //base case
        if(j1<0 || j2<0 ||j1>=c ||j2>=c)//out of bound
        return -1000000;

        if(i==r-1){
            if(j1==j2)
            return g[i][j1];
            else
            return g[i][j1]+g[i][j2];
        }
        //explore all path of both
        int maxi=-1000000;
        for(int dj1=-1;dj1<=1;dj1++){//as movement left col,cur,right col
            for(int dj2=-1;dj2<=1;dj2++){
                int value=0;
                if(j1==j2)
                value=g[i][j1];
                else
                value=g[i][j1]+g[i][j2];

                value+=find(i+1,j1+dj1,j2+dj2,r,c,g);
                maxi=Math.max(maxi,value);


            }
        }
        return maxi;
    }
}
//memoization
class Solution {
    public int cherryPickup(int[][] grid) {
        //optimization of recursion using memoization
        int r=grid.length;
        int c=grid[0].length;
        int dp[][][]=new int[r][c][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++)
            Arrays.fill(dp[i][j],-1);
        }
        return find(0,0,c-1,r,c,grid,dp);
        
    }
    int find(int i,int j1,int j2,int r,int c,int [][]g,int dp[][][]){
        //base case
        if(j1<0 || j2<0 ||j1>=c ||j2>=c)//out of bound
        return -1000000;

        if(i==r-1){
            if(j1==j2)
            return g[i][j1];
            else
            return g[i][j1]+g[i][j2];
        }
        if(dp[i][j1][j2]!=-1)
        return dp[i][j1][j2];
        //explore all path of both
        int maxi=-1000000;
        for(int dj1=-1;dj1<=1;dj1++){//as movement left col,cur,right col
            for(int dj2=-1;dj2<=1;dj2++){
                int value=0;
                if(j1==j2)
                value=g[i][j1];
                else
                value=g[i][j1]+g[i][j2];

                value+=find(i+1,j1+dj1,j2+dj2,r,c,g,dp);
                maxi=Math.max(maxi,value);


            }
        }
        return dp[i][j1][j2]=maxi;
    }
}
//tabulation
class Solution {
    public int cherryPickup(int[][] grid) {
        //tabulation
        int r=grid.length;
        int c=grid[0].length;
        int dp[][][]=new int[r][c][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++)
            Arrays.fill(dp[i][j],0);
        }
        //base case as last row
        for(int j1=0;j1<c;j1++){
            for(int j2=0;j2<c;j2++){
                if(j1==j2)
                dp[r-1][j1][j2]=grid[r-1][j1];
                else
                dp[r-1][j1][j2]=grid[r-1][j1]+grid[r-1][j2];
            }
        }
        //explore all states
        for(int i=r-2;i>=0;i--){
            for(int j1=0;j1<c;j1++){
                for(int j2=0;j2<c;j2++){
                    int maxi=-1000000;
                    for(int dj1=-1;dj1<=1;dj1++){
                        for(int dj2=-1;dj2<=1;dj2++){
                            int value=0;
                            if(j1==j2)
                            value=grid[i][j1];
                            else
                            value=grid[i][j1]+grid[i][j2];

    if(j1+dj1>=0 && j1+dj1<c && j2+dj2>=0 && j2+dj2<c)
        value+=dp[i+1][j1+dj1][j2+dj2];
        else
        value+=-1000000;

        maxi=Math.max(maxi,value);
        
                        }
                    }
                    dp[i][j1][j2]=maxi;
                }
            }
        }
    return dp[0][0][c-1];
    }
}
//optimization of tabulation
class Solution {
    public int cherryPickup(int[][] grid) {
        //optimization of tabulation
        int r=grid.length;
        int c=grid[0].length;
        int prev[][]=new int[c][c];
    
        //base case as last row
        for(int j1=0;j1<c;j1++){
            for(int j2=0;j2<c;j2++){
                if(j1==j2)
                prev[j1][j2]=grid[r-1][j1];
                else
                prev[j1][j2]=grid[r-1][j1]+grid[r-1][j2];
            }
        }
        //explore all states
        for(int i=r-2;i>=0;i--){
            int cur[][]=new int[c][c];
            for(int j1=0;j1<c;j1++){
                for(int j2=0;j2<c;j2++){
                    int maxi=-1000000;
                    for(int dj1=-1;dj1<=1;dj1++){
                        for(int dj2=-1;dj2<=1;dj2++){
                            int value=0;
                            if(j1==j2)
                            value=grid[i][j1];
                            else
                            value=grid[i][j1]+grid[i][j2];

    if(j1+dj1>=0 && j1+dj1<c && j2+dj2>=0 && j2+dj2<c)
        value+=prev[j1+dj1][j2+dj2];
        else
        value+=-1000000;

        maxi=Math.max(maxi,value);
        
                        }
                    }
                    cur[j1][j2]=maxi;
                }
            }
            prev=cur;
        }
    return prev[0][c-1];
    }
}
