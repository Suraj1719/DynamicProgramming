package dpseries;

public class lec15partitionEqualSubsetSumLC416 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int nums[] = {1,2,3,5};
        System.out.println(canPartition(nums));

	}
	public static boolean canPartition(int[] arr) {
        //optimization of tabulation method 
        int totSum=0;
        int n=arr.length;
    
    for(int i=0; i<n;i++){
        totSum+= arr[i];
    }
    
    if (totSum%2==1) 
    return false;
    
    int k=totSum/2;
     boolean prev[]=new boolean[k+1];
        prev[0] = true;
        
        if(arr[0]<=k)
            prev[arr[0]] = true;
        
        for(int ind = 1; ind<n; ind++){
            boolean cur[]=new boolean[k+1];
            cur[0] = true;
            for(int target= 1; target<=k; target++){
                boolean notTaken = prev[target];
        
                boolean taken = false;
                    if(arr[ind]<=target)
                        taken = prev[target-arr[ind]];
            
                cur[target]= notTaken||taken;
            }
            prev = cur;
        }
        
        return prev[k];
        
    }
	
//	class Solution {
//	    public boolean canPartition(int[] nums) {
//	        //brute force 
//	        //time complexity : O(2^n)
//	        //space complexity :O(n) gives TLE
//	        int sum=0;
//	        int n=nums.length;
//	        for(int i=0;i<n;i++){
//	            sum+=nums[i];
//	        }
//	        if(sum%2==1)
//	            return false;
//	        sum/=2;
//
//	        return isPossible(n-1,nums,sum);
//	    }
//	    private static boolean isPossible(int n, int[] nums, int sum) {
//	        if(sum==0)//base case
//	            return true;
//	        if(n==0)
//	            return nums[0]==sum;
//	        boolean take=false;
//	        boolean notTake=isPossible(n-1,nums,sum);
//	        if(nums[n]<=sum)
//	            take=isPossible(n-1,nums,sum-nums[n]);
//
//	        return take | notTake;
//	    }
//	}
//	//memoization of recursive approach
//	class Solution {
//	    public boolean canPartition(int[] nums) {
//	        
//	        //time complexity : O(n*sum)
//	        //space complexity :O(n*sum)+O(n) 
//	        int sum=0;
//	        int n=nums.length;
//	        for(int i=0;i<n;i++){
//	            sum+=nums[i];
//	        }
//	        if(sum%2==1)
//	            return false;
//	        sum/=2;
//	        int dp[][]=new int[n][sum+1];
//	        for(int i=0;i<n;i++){
//	            Arrays.fill(dp[i],-1);
//	        }
//	        for(int i=0;i<n;i++){
//	            dp[i][0]=1;//1 denote true and 0 as false  and -1 as not visited
//	        }
//
//	        return isPossible(n-1,nums,sum,dp)==1;
//	    }
//	    private static int isPossible(int n, int[] nums, int sum,int dp[][]) {
//	        if(sum==0)//base case
//	            return 1;
//	        if(n==0)
//	            return nums[0]==sum?1:0;
//	        if(dp[n][sum]!=-1)
//	        return dp[n][sum];
//	        int take=0;
//	        int notTake=isPossible(n-1,nums,sum,dp);
//	        if(nums[n]<=sum)
//	            take=isPossible(n-1,nums,sum-nums[n],dp);
//
//	        return dp[n][sum]=take | notTake;
//	    }
//	}
//
//	//tabulation method
//	class Solution {
//	    public boolean canPartition(int[] arr) {
//	        //tabulation method for removing extra stack space in memoization
//	        int totSum=0;
//	        int n=arr.length;
//	    
//	    for(int i=0; i<n;i++){
//	        totSum+= arr[i];
//	    }
//	    
//	    if (totSum%2==1) 
//	    return false;
//	    
//	    
//	        int k = totSum/2;
//	        boolean dp[][]=new boolean[n][k+1];
//	    
//	        for(int i=0; i<n; i++){
//	            dp[i][0] = true;
//	        }
//	        
//	        if(arr[0]<=k)
//	            dp[0][arr[0]] = true;
//	        
//	        for(int ind = 1; ind<n; ind++){
//	            for(int target= 1; target<=k; target++){
//	                
//	                boolean notTaken = dp[ind-1][target];
//	        
//	                boolean taken = false;
//	                    if(arr[ind]<=target)
//	                        taken = dp[ind-1][target-arr[ind]];
//	            
//	                dp[ind][target]= notTaken||taken;
//	            }
//	        }
//	        
//	        return dp[n-1][k];
//	        
//	    }
//
//	}
//	//optimization of space in tabulation
//	class Solution {
//	    public boolean canPartition(int[] arr) {
//	        //optimization of tabulation method 
//	        int totSum=0;
//	        int n=arr.length;
//	    
//	    for(int i=0; i<n;i++){
//	        totSum+= arr[i];
//	    }
//	    
//	    if (totSum%2==1) 
//	    return false;
//	    
//	    int k=totSum/2;
//	     boolean prev[]=new boolean[k+1];
//	        prev[0] = true;
//	        
//	        if(arr[0]<=k)
//	            prev[arr[0]] = true;
//	        
//	        for(int ind = 1; ind<n; ind++){
//	            boolean cur[]=new boolean[k+1];
//	            cur[0] = true;
//	            for(int target= 1; target<=k; target++){
//	                boolean notTaken = prev[target];
//	        
//	                boolean taken = false;
//	                    if(arr[ind]<=target)
//	                        taken = prev[target-arr[ind]];
//	            
//	                cur[target]= notTaken||taken;
//	            }
//	            prev = cur;
//	        }
//	        
//	        return prev[k];
//	        
//	    }
//
//	}
//

}
