approach -1 
import java.util.* ;
import java.io.*; 
public class Solution {
    //brute force
    // time complexity : exponential  space com : O(n)  gives tle
    static int mod=1000000007;
    public static int evaluateExp(String exp) {
        int n=exp.length();
        return f(0,n-1,1,exp);
    }
    static int f(int i,int j,int isTrue,String s){
        //base case
        if(i>j) return 0;
        if(i==j){
            if(isTrue==1) return s.charAt(i)=='T'?1:0;
            else
            return s.charAt(i)=='F'?1:0;
        }
        long ans=0;
        for(int ind=i+1;ind<=j-1;ind+=2){
            long lT=f(i,ind-1,1,s);
            long lF=f(i,ind-1,0,s);
            long rT=f(ind+1,j,1,s);
            long rF=f(ind+1,j,0,s);
              
            if(s.charAt(ind)=='&'){
                if(isTrue==1)ans = (ans+ (lT*rT)%mod)%mod;
                else ans = (ans+ (lT*rF)%mod + (lF*rT)%mod +(lF*rF)%mod)%mod;


            }else if(s.charAt(ind)=='|'){
        if(isTrue==1) ans= (ans+ (lT*rF)%mod + (lF*rT)%mod +(lT*rT)%mod)%mod;
   
        else ans = (ans+ (lF*rF)%mod)%mod;   
            }else{
    if(isTrue==1) ans= (ans+ (lT*rF)%mod + (lF*rT)%mod)%mod;  
    else   ans= (ans+ (lT*rT)%mod + (lF*rF)%mod)%mod;
            }
        }
        return (int)(ans%mod);
    }
}

//approach - 2
import java.util.* ;
import java.io.*; 
public class Solution {
    //memoization
    // time complexity : O(n^3)*2  space com : O(n^3)*2+ O(n)  
    static int mod=1000000007;
    public static int evaluateExp(String exp) {
        int n=exp.length();
        int dp[][][]=new int[n][n][2];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        return f(0,n-1,1,exp,dp);
    }
    static int f(int i,int j,int isTrue,String s,int dp[][][]){
        //base case
        if(i>j) return 0;
        if(i==j){
            if(isTrue==1) return s.charAt(i)=='T'?1:0;
            else
            return s.charAt(i)=='F'?1:0;
        }
        if(dp[i][j][isTrue]!=-1) return dp[i][j][isTrue];
        long ans=0;
        for(int ind=i+1;ind<=j-1;ind+=2){
            long lT=f(i,ind-1,1,s,dp);
            long lF=f(i,ind-1,0,s,dp);
            long rT=f(ind+1,j,1,s,dp);
            long rF=f(ind+1,j,0,s,dp);
              
            if(s.charAt(ind)=='&'){
                if(isTrue==1)ans = (ans+ (lT*rT)%mod)%mod;
                else ans = (ans+ (lT*rF)%mod + (lF*rT)%mod +(lF*rF)%mod)%mod;


            }else if(s.charAt(ind)=='|'){
        if(isTrue==1) ans= (ans+ (lT*rF)%mod + (lF*rT)%mod +(lT*rT)%mod)%mod;
   
        else ans = (ans+ (lF*rF)%mod)%mod;   
            }else{
    if(isTrue==1) ans= (ans+ (lT*rF)%mod + (lF*rT)%mod)%mod;  
    else   ans= (ans+ (lT*rT)%mod + (lF*rF)%mod)%mod;
            }
        }
        return dp[i][j][isTrue]=(int)(ans%mod);
    }
}
