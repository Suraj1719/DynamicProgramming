approach - 1
class Solution {
    boolean isPalindrome(int i,int j,String s){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;

            i++;j--;
        }
        return true;
    }
    public int minCut(String s) {
        //brute force 
        //recursion  time com : exponential   space com. :O(n) statck space
        int n=s.length();
        return f(0,s)-1;//as at last we also consider one partition for end of string
    }
    int f(int i,String s){
        if(i==s.length()) return 0;

        int min_part=Integer.MAX_VALUE;
        for(int j=i;j<s.length();j++){
            if(isPalindrome(i,j,s)){
                int part=1+f(j+1,s);
                min_part=Math.min(min_part,part);
            }
        }
        return min_part;
    }
}

//approach - 2
class Solution {
    boolean isPalindrome(int i,int j,String s){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;

            i++;j--;
        }
        return true;
    }
    public int minCut(String s) {
        //memoization 
        //  time com : O(n)*O(n)   space com. :O(n)+O(n) 
        int n=s.length();
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        return f(0,s,dp)-1;//as at last we also consider one partition for end of string
    }
    int f(int i,String s,int dp[]){
        if(i==s.length()) return 0;
        
        if(dp[i]!=-1) return dp[i];

        int min_part=Integer.MAX_VALUE;
        for(int j=i;j<s.length();j++){
            if(isPalindrome(i,j,s)){
                int part=1+f(j+1,s,dp);
                min_part=Math.min(min_part,part);
            }
        }
        return dp[i]=min_part;
    }
}

//approach - 3 (tabulation)
class Solution {
    boolean isPalindrome(int i,int j,String s){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;

            i++;j--;
        }
        return true;
    }
    public int minCut(String s) {
        //tabulation 
        //  time com : O(n)   space com. :O(n) 
        int n=s.length();
        int dp[]=new int[n+1];
       //base case dp[n]=0

       for(int i=n-1;i>=0;i--){
           int min_part=Integer.MAX_VALUE;
            for(int j=i;j<s.length();j++){
                if(isPalindrome(i,j,s)){
                    int part=1+dp[j+1];
                   min_part=Math.min(min_part,part);
                }
            }
            dp[i]=min_part;
        }
        return dp[0]-1;//as at last we also consider one partition for end of string
    }
}
