package dpseries;

import java.util.*;

public class lec9UniquePath2lc63 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int obstacleGrid[][] = {{0,0,0},{0,1,0},{0,0,0}};
		System.out.println(uniquePathsWithObstaclesRecursion(obstacleGrid));
		System.out.println(uniquePathsWithObstaclesMemoization(obstacleGrid));
		System.out.println(uniquePathsWithObstaclesTabulationtion(obstacleGrid));
		System.out.println(OptimisationOfTabulationtion(obstacleGrid));

	}
	static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        // Write your code here.
		int row=mat.size();
		int col=mat.get(0).size();
		int prev[]=new int[row];
		Arrays.fill(prev, 0);
		for(int i=0;i<row;i++) {
			int cur[]=new int[col];
			for(int j=0;j<col;j++) {
				if(mat.get(i).get(j)==1)//in dp[i][j] , dp[i] is current array
					cur[j]=0;
				else if(i==0 && j==0)
					cur[j]=1;
				else {
					int up=0;
					int left=0;
					if(i>0)up=prev[j];
					if(j>0)left=cur[j-1];
					
					cur[j]=up+left;
				}
			}
			prev=cur;
		}
		
			return prev[col-1];
		
    }
private static int OptimisationOfTabulationtion(int[][] m) {
		// TODO Auto-generated method stub
	//as we see that for current calculation we only need previous row and current row
	//so space complexity tend to constant
	//time complexity :O(row*col) s.c:O(1)
	int row=m.length;
	int col=m[0].length;
	int prev[]=new int[row];
	Arrays.fill(prev, 0);
	for(int i=0;i<row;i++) {
		int cur[]=new int[col];
		for(int j=0;j<col;j++) {
			if(m[i][j]==1)//in dp[i][j] , dp[i] is current array
				cur[j]=0;
			else if(i==0 && j==0)
				cur[j]=1;
			else {
				int up=0;
				int left=0;
				if(i>0)up=prev[j];
				if(j>0)left=cur[j-1];
				
				cur[j]=up+left;
			}
		}
		prev=cur;
	}
	
		return prev[col-1];
	}
private static int uniquePathsWithObstaclesTabulationtion(int [][]m) {
		// TODO Auto-generated method stub
	//t.c :O(row*col)  s.c :O(row*col)
		int row=m.length;
		int col=m[0].length;
		int dp[][]=new int[row][col];
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				if(m[i][j]==1)
					dp[i][j]=0;
				else if(i==0 && j==0)
					dp[i][j]=1;
				else {
					int up=0;
					int left=0;
					if(i>0)up=dp[i-1][j];
					if(j>0)left=dp[i][j-1];
					
					dp[i][j]=up+left;
				}
			}
		}
		return dp[row-1][col-1];
	}
private static int uniquePathsWithObstaclesMemoization(int[][] obstacleGrid) {
		// TODO Auto-generated method stub
	//we use memoization to store the overlapping problem and it become decrease time complexity 
	int row=obstacleGrid.length;
	int col=obstacleGrid[0].length;
	int dp[][]=new int[row][col];
	for(int i=0;i<row;i++) {
		for(int j=0;j<col;j++) {
			dp[i][j]=-1;
		}
	}
	return memoizationOnRecursion(row-1,col-1,dp,obstacleGrid);
	
	}
private static int memoizationOnRecursion(int i, int j, int[][] dp,int m[][]) {
	// TODO Auto-generated method stub
	if(i>=0 && j>=0 && m[i][j]==1)
		return 0;
	if(i==0 && j==0)//base case
		return 1;
	
	if(i<0 || j<0)
		return 0;
	if(dp[i][j]!=-1)
		return dp[i][j];
	
	return dp[i][j]=memoizationOnRecursion(i-1,j,dp,m)+memoizationOnRecursion(i,j-1,dp,m);
}
public static int uniquePathsWithObstaclesRecursion(int[][] obstacleGrid) {
	//Give TLE as time complexity :O(2^(row+col)) space com. :O(1)
	int row=obstacleGrid.length;
	int col=obstacleGrid[0].length;
	return recursion(row-1,col-1,obstacleGrid);
        
    }
private static int recursion(int i, int j,int m[][]) {
	// TODO Auto-generated method stub
	if(i>=0 && j>=0 && m[i][j]==1)
		return 0;
	if(i==0 && j==0)//base case
		return 1;
	
	if(i<0 || j<0)
		return 0;
	
	return recursion(i-1,j,m)+recursion(i,j-1,m);
}

}
