//approach 1: find all substring and ccheck palindrome or not and return maximum length of palindromic substring
//time complexity :O(n^3)   space complexity : O(1)

class Solution {
    public String longestPalindrome(String s) {
        int n=s.length();
	int length=0;String res="";
	for(int i=0;i<n;i++) {
		for(int j=i+1;j<n;j++) {
			if(s.charAt(i)==s.charAt(j)) {
				if(isPalindrome(s,i,j)) {
					if((j-i)>length){
                        length=j-i;
						 res=s.substring(i, j+1);
                    }
				}
			}
		}
	}
	if(res=="")
		res=s.substring(0,1);
      
	return res;
    }
    
    private static boolean isPalindrome(String s, int i, int j) {
	while(i<j) {
		if(s.charAt(i)!=s.charAt(j))
			return false;
		i++;j--;
	}
	return true;
}
}

//approach -2: expanding string around center
class Solution {
    public String longestPalindrome(String s) {
    
        //Approach : Expand Around Center  : T.C =O(N^2) S.C=O(1)
        
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }
    private int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }
}

//approach -3 :using dynamic programming
class Solution {
    public String longestPalindrome(String s) {
    
        //time complexity : O(n2) Space complexity : O(n2)
        if (s == null || "".equals(s)) {
            return s;
        }
        
        int len = s.length();
        String ans = "";
        int max = 0;
        boolean[][] dp = new boolean[len][len];
        
        //s = "babad"
        
        for (int j = 0; j < len; j++) {
            
            for (int i = 0; i <= j; i++) {
                
                boolean judge = s.charAt(i) == s.charAt(j);
                
    dp[i][j] = j - i > 2 ? dp[i + 1][j - 1] && judge : judge;
    
    //important concept  as if you compare i and j index character and if substring is palindrome from
    //(i+1) till index (j-1) , then if i and j charactyer are same , it contribute to palindrom
    
    //for ex : abccdccxy  here 'cdc' is already palindrome , so character at index 2 and 6 are contribute to palindrome

                if (dp[i][j] && j - i + 1 > max) {
                    max = j - i + 1;
                    ans = s.substring(i, j + 1);
                }
            }
        }
        return ans;
    }
}
