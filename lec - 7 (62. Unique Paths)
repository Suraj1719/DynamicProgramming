


//approach - 1(using recursion)
//Gives TLE
//t . c : O(2^(m+n))
//s . c:O(path length that is (m-1)+(n-1))
package dpseries;
import java.util.*;
public class lec8UniqePathLC62 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int row=sc.nextInt();
		int col=sc.nextInt();
		System.out.println(uniquePaths(row,col));
	}
	public static int uniquePaths(int m, int n) {
	
		
		return bfsrecursive(0,0,m,n);
	}

	private static int bfsrecursive(int i, int j, int m, int n) {
		// TODO Auto-generated method stub
		if(i==m-1 && j==n-1)
			return 1;
		if(i>=m || j>=n)
			return 0;
		return bfsrecursive(i+1,j,m,n)+bfsrecursive(i,j+1,m,n);
	}

}


//optimization using memoization

//time complexity : O(n*m)
//spce complexity : O((n-1)+(m-1))+O(n*m)
package dpseries;
import java.util.*;
public class lec8UniqePathLC62 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int row=sc.nextInt();
		int col=sc.nextInt();
		System.out.println(uniquePaths(row,col));
	}
	public static int uniquePaths(int m, int n) {
		// Write your code here.
		int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
       return bfs(0,0,m,n,dp);
	}
	static int bfs(int x,int y,int m,int n,int dp[][]){
        if(x==m-1 && y==n-1)
           return 1;
        if(x>=m || y>=n)
            return 0;
        if(dp[x][y]!=-1)
        	return dp[x][y];

        return dp[x][y]=bfs(x+1,y,m,n,dp)+bfs(x,y+1,m,n,dp);
    }

}


But above memoization approach extra stack space is used . We can eliminate using tabulation method .
//Tabulation approach
//time complexity : O(n*m)
//spce complexity : O(n*m)
import java.util.*;
public class lec8UniqePathLC62 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int row=sc.nextInt();
		int col=sc.nextInt();
		System.out.println(uniquePaths(row,col));
		System.out.println(tabulation(row,col));
	}
	public static int tabulation(int n,int m) {
		int ans[][]=new int[n][m];
	    for(int i=0;i<n;i++) {
	    	for(int j=0;j<m;j++) {
	    		if(i==0 && j==0)
	    			ans[i][j]=1;
	    		else {
	    			int up=0;
	    			int left=0;
	    			if(i>0)
	    			    up=ans[i-1][j];
	    			if(j>0)
	    				left=ans[i][j-1];
	    			
	    			ans[i][j]=up+left;
	    		}
	    	}
	    }
	    return ans[n-1][m-1];
		
	}
}



Again we can observe that here only previous row value needed to calculate curent in tabulation approach .
So we can reduse space complexity to constatnt time .
public static int tabulation(int n,int m) {
		
		//space optimization of tabulation approach to constant
		int prev[]=new int[n];
		Arrays.fill(prev, 0);
	    for(int i=0;i<n;i++) {
	    	int cur[]=new int[m];
	    	for(int j=0;j<m;j++) {
	    		if(i==0 && j==0)//i -> cur row
	    			cur[j]=1;
	    		else {
	    			int up=0;
	    			int left=0;
	    			if(i>0)
	    			    up=prev[j];//i-1 -> prev
	    			if(j>0)
	    				left=cur[j-1];
	    			
	    			cur[j]=up+left;
	    		}
	    	}
	    	prev=cur;
	    }
	    return prev[m-1];
		
		
	}
