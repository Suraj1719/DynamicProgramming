approach -1
class Solution {
    public int maxCoins(int[] nums) {
        //brute force recursion
        //time : exponential  space : O(n) stack space  gives tle
        int n=nums.length;
        int new_nums[]=new int[n+2];
        new_nums[0]=1;new_nums[n+1]=1;
        for(int i=0;i<n;i++){
            new_nums[i+1]=nums[i];
        }

        return f(1,n,new_nums);
    }
    int f(int i,int j,int nums[]){
        if(i>j) return 0;
        int max_coin=Integer.MIN_VALUE;
        for(int ind=i;ind<=j;ind++){
            int coin=nums[i-1]*nums[ind]*nums[j+1] + f(i,ind-1,nums) + f(ind+1,j,nums);
            max_coin=Math.max(max_coin,coin);
        }
        return max_coin;
    }
}

approach-2
class Solution {
    public int maxCoins(int[] nums) {
        //memoization
        //time : O(n^3)  space : O(n^2)+O(n) 
        int n=nums.length;
        int new_nums[]=new int[n+2];
        new_nums[0]=1;new_nums[n+1]=1;
        for(int i=0;i<n;i++){
            new_nums[i+1]=nums[i];
        }
        int dp[][]=new int[n+1][n+1];
        for(int i=0;i<=n;i++){
            Arrays.fill(dp[i],-1);
        }

        return f(1,n,new_nums,dp);
    }
    int f(int i,int j,int nums[],int dp[][]){
        if(i>j) return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        int max_coin=Integer.MIN_VALUE;
        for(int ind=i;ind<=j;ind++){
            int coin=nums[i-1]*nums[ind]*nums[j+1] + f(i,ind-1,nums,dp) +
                                                     f(ind+1,j,nums,dp);
            max_coin=Math.max(max_coin,coin);
        }
        return dp[i][j]=max_coin;
    }
}

approach-3

class Solution {
    public int maxCoins(int[] nums) {
        //tabulation
        //time : O(n^3)  space : O(n^2)
        int n=nums.length;
        int new_nums[]=new int[n+2];
        new_nums[0]=1;new_nums[n+1]=1;
        for(int i=0;i<n;i++){
            new_nums[i+1]=nums[i];
        }
        int dp[][]=new int[n+2][n+2];
        for(int i=n;i>=1;i--){
            for(int j=1;j<=n;j++){
                if(i>j)continue;
                int max_coin=Integer.MIN_VALUE;
                for(int ind=i;ind<=j;ind++){
                    int coin=new_nums[i-1]*new_nums[ind]*new_nums[j+1] + dp[i][ind-1] +
                                                             dp[ind+1][j];
                    max_coin=Math.max(max_coin,coin);
                }
            dp[i][j]=max_coin;
            }
        }

        return dp[1][n];
    }
}
