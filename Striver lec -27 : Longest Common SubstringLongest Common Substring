package dpseries;
import java.util.*;
public class lec27longestcommonsubstringconsecutive {
	
	//see GFG article

	public static void main(String[] args) {
		int n, m;
        String X = "abcdxyz";
        String Y = "xyzabcd";
 
        n = X.length();
        m = Y.length();
 
        System.out.println(lcs(n, m, 0,X,Y));
        System.out.println(LCSubStr(X.toCharArray(),Y.toCharArray(),n,m));
        int dp[][]=new int[n][m];
        for(int i=0;i<n;i++) {
        	Arrays.fill(dp[i], -1);
        }
        //System.out.println(lcsdp(n-1,m-1,0,X,Y,dp));
        System.out.println(LCSubStr(X,Y,n,m));

	}
	static int lcs(int i, int j, int count,String s,String t)
    {
 //recursion  time complexity :O(2^n)  space complexity :O(1)
        if (i == 0 || j == 0)
        {
            return count;
        }
 
        if (s.charAt(i - 1) == t.charAt(j - 1))
        {
            count = lcs(i - 1, j - 1, count + 1,s,t);
        }
        count = Math.max(count,Math.max(lcs(i, j - 1, 0,s,t),lcs(i - 1, j, 0,s,t)));
        
        
        return count;
    }
	
	static int lcsdp(int i, int j, int count,String s,String t,int dp[][])
    {
        if (i == 0 || j == 0)
        {
            return dp[i][j]=count;
        }
        if(dp[i][j]!=-1)
        	return dp[i][j];
 
        if (s.charAt(i - 1) == t.charAt(j - 1))
        {
        	dp[i][j]= lcs(i - 1, j - 1, count + 1,s,t);
        }
        count = Math.max(count,Math.max(lcs(i, j - 1, 0,s,t),lcs(i - 1, j, 0,s,t)));
        
        
        return dp[i][j]=count;
    }
	
	static int LCSubStr(char X[], char Y[], int m, int n)
    {
		
		//tabulation 
		
//		Time Complexity: O(m*n) 
//		Auxiliary Space: O(m*n), since m*n extra space has been taken.
		
      
        int LCStuff[][] = new int[m + 1][n + 1];
 
       
        int result = 0;
 
        for (int i = 0; i <= m; i++) {//1 based indexing
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0)
                    LCStuff[i][j] = 0;
                else if (X[i - 1] == Y[j - 1]) {
                    LCStuff[i][j] = LCStuff[i - 1][j - 1] + 1;
                    result = Integer.max(result,LCStuff[i][j]);
                }
                else
                    LCStuff[i][j] = 0;
            }
        }
        return result;
    }
	
	//space optimization of tabulation
	static int LCSubStr(String s,String t,int n,int m)
{ 
		
		//Time Complexity: O(n*m)
		//Auxiliary Space: O(min(m,n))
		// Create DP table
		int prev[] = new int[m + 1];
		 
	       
        int result = 0;
 
        for (int i = 0; i <= n; i++) {//1 based indexing
        	int cur[] = new int[m + 1];
            for (int j = 0; j <= m; j++) {
                if (i == 0 || j == 0)
                	cur[j] = 0;
                else if (s.charAt(i-1) == t.charAt(j-1)) {
                	cur[j] = prev[j - 1] + 1;
                    result = Integer.max(result,cur[j]);
                }
                else
                	cur[j] = 0;
            }
            prev=cur;
        }
        return result;
}

}
